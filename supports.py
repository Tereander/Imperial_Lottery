import json
import logging
from typing import Tuple, Dict, Optional

import telebot
from telebot import TeleBot, types
from telebot.types import Message

import database
import dict_convert
import generators
import coupons
import configs


def process_promo_amount(message: Message, bot: TeleBot):
    try:
        amount = int(message.text)
        if not 1 <= amount <= 286:
            bot.send_message(message.chat.id, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 286!")
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        promo_code = generators.generate_promo_code(amount)
        bot.send_message(
            message.chat.id,
            f"üéâ –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ **{amount} –º–æ–Ω–µ—Ç**:\n\n`{promo_code}`\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –≤ –±–æ—Ç–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /promo!",
            parse_mode="Markdown"
        )

    except ValueError:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 100")


def process_promo_code(message: Message, bot: TeleBot):
    user_id = message.from_user.id
    promo_code = message.text.strip().upper()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥–∞
    is_valid, amount = generators.validate_promo_code(promo_code)
    if not is_valid:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥!")
        return

    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞—á–∏—Å–ª–∏—Ç—å –º–æ–Ω–µ—Ç—ã
    success = coupons.add_coins_to_user(user_id, amount, promo_code)
    if success:
        bot.send_message(
            message.chat.id,
            f"üéâ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ **{amount}** –º–æ–Ω–µ—Ç!",
            parse_mode="Markdown")
    else:
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!",
            parse_mode="Markdown")

def converter_type_user_data(message: types.Message) -> Dict[str, Optional[str]]:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ message –≤ —Å–ª–æ–≤–∞—Ä—å."""
    if not message or not message.from_user:
        return {}

    user = message.from_user
    return {
        "id": user.id,
        "first_name": user.first_name,
        "last_name": user.last_name,
        "full_name": user.full_name,
        "username": user.username,
        "language_code": user.language_code,
        "is_bot": user.is_bot,
        "is_premium": getattr(user, 'is_premium', None)  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ
    }

def info_message(user_id, message, bot):
    conn, cursor = database.postgres_init()

    try:
        cursor.execute(
            f"""SELECT user_data, opened_cases, title FROM user_data WHERE user_id={user_id}"""
        )
        user_list = cursor.fetchone()
        user_data, opened_cases, title = user_list
        print(type(user_data))
        # user_data = json.load(user_data)

        cursor.execute(
            f"""SELECT qty_coins FROM money WHERE user_id={user_id}"""
        )
        qty_coins = int(cursor.fetchone()[0])
    except (Exception, BaseException):
        bot.send_message(
            message.chat.id,
            '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
        )
        return
    finally:
        conn.close()
        cursor.close()

    bot.send_message(
        message.chat.id,
        '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n'
        '\n'
        f'–ò–º—è: <b>{user_data['full_name']}</b>\n'
        f'–¢–∏—Ç—É–ª: <b>{title}</b>\n'
        f'–ë–∞–ª–∞–Ω—Å: <b>{qty_coins}</b>\n'
        f'–û—Ç–∫—Ä—ã—Ç–æ –∫–µ–π—Å–æ–≤: <b>{opened_cases}</b> —à—Ç.\n',
        parse_mode='html'
    )


def my_coupons(user_id, message, bot):
    conn, cursor = database.postgres_init()
    coupons_list = []

    try:
        cursor.execute("SELECT * FROM user_coupons WHERE user_id=%s", (user_id,))
        coupons_list = cursor.fetchall()
    except Exception as error:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫—É–ø–æ–Ω–æ–≤ –∏–∑ –ë–î: {error}')
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–∏—Ö –∫—É–ø–æ–Ω–æ–≤")
        return
    finally:
        conn.close()

    if not coupons_list:
        bot.send_message(message.chat.id, "üé´ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫—É–ø–æ–Ω–æ–≤")
        return

    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫—É–ø–æ–Ω–æ–≤ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 50 —à—Ç—É–∫
    chunk_size = 50
    coupons_chunks = [coupons_list[i:i + chunk_size]
                      for i in range(0, len(coupons_list), chunk_size)]

    total_chunks = len(coupons_chunks)

    for chunk_num, chunk in enumerate(coupons_chunks, 1):
        markup = types.InlineKeyboardMarkup(row_width=2)
        button_list = []

        for coupon in chunk:
            us_id, coupon_code, quantity, name, color = coupon
            smile = dict_convert.color_to_smile_convert.get(color, "üéüÔ∏è")
            button = types.InlineKeyboardButton(
                f"{smile} {name}",
                callback_data=f'coupon_code {coupon_code}'
            )
            button_list.append(button)

        markup.add(*button_list)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        if total_chunks > 1:
            header = f"üé´ –í–∞—à–∏ –∫—É–ø–æ–Ω—ã (—á–∞—Å—Ç—å {chunk_num} –∏–∑ {total_chunks})"
        else:
            header = "üé´ –í–∞—à–∏ –∫—É–ø–æ–Ω—ã"

        if chunk_num == 1 and len(coupons_list) > chunk_size:
            header += "\n\nüìã –£ –≤–∞—Å –º–Ω–æ–≥–æ –∫—É–ø–æ–Ω–æ–≤! –û–Ω–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞."

        bot.send_message(message.chat.id, header, reply_markup=markup)