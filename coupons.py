import logging
import random
import traceback

import telebot
from telebot.types import InputMediaPhoto

import configs
import generators
import database
import images
import dict_convert
import keyboards
from dict_convert import smile_convert


logger = logging.getLogger(__name__)  # –õ—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä

def coin_check(us_id, price_pack_coupons):
    conn, cursor = database.postgres_init()
    try:
        cursor.execute(
            f'SELECT qty_coins FROM money WHERE user_id=%s', (us_id,)
        )
        qty_coins = cursor.fetchone()
        coins = int(qty_coins[0])
        if coins < configs.price_pack_coupons:
            return False
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç
            cursor.execute(
                'UPDATE money SET qty_coins = qty_coins - %s WHERE user_id = %s',
                (price_pack_coupons, us_id,)
            )
            conn.commit()
            return True
    except (Exception, BaseException):
        return False
    finally:
        conn.close()
        cursor.close()


def qty_coin(us_id):
    conn, cursor = database.postgres_init()
    try:
        cursor.execute(
            f'SELECT qty_coins FROM money WHERE user_id=%s', (us_id,)
        )
        qty_coins = cursor.fetchone()
        coins = int(qty_coins[0])
        return coins
    except (Exception, BaseException):
        return None
    finally:
        conn.close()
        cursor.close()


def add_coins_to_user(user_id: int, amount: int, promo_code: str) -> bool:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –º–æ–Ω–µ—Ç—ã –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –≤ used"""
    conn, cursor = database.postgres_init()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —Ä–∞–Ω–µ–µ
        cursor.execute(
            'SELECT 1 FROM promocode_used WHERE promocode = %s',
            (promo_code, )
        )
        if cursor.fetchone():
            return False  # –ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω

        # –ù–∞—á–∏—Å–ª—è–µ–º –º–æ–Ω–µ—Ç—ã
        cursor.execute(
            'UPDATE money SET qty_coins = qty_coins + %s WHERE user_id = %s',
            (amount, user_id)
        )

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
        cursor.execute(
            'INSERT INTO promocode_used (user_id, promocode) VALUES (%s, %s)',
            (user_id, promo_code))

        conn.commit()
        return True

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        conn.rollback()
        return False
    finally:
        conn.close()
        cursor.close()


def check_user_exists(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î"""
    conn, cursor = database.postgres_init()
    try:
        cursor.execute('SELECT 1 FROM user_data WHERE user_id = %s LIMIT 1', (user_id,))
        return cursor.fetchone() is not None
    finally:
        conn.close()


def add_start_coins(user_id: int, amount: int) -> bool:
    """–ù–∞—á–∏—Å–ª—è–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã, —Å–æ–∑–¥–∞–≤–∞—è –∑–∞–ø–∏—Å—å –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    conn, cursor = database.postgres_init()
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º INSERT ON CONFLICT –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤—Å—Ç–∞–≤–∫–∏
        cursor.execute('''
            INSERT INTO money (user_id, qty_coins) 
            VALUES (%s, %s)
            ON CONFLICT (user_id) DO NOTHING
            RETURNING 1
        ''', (user_id, amount))

        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ (RETURNING 1 –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
        if cursor.fetchone():
            conn.commit()
            return True

        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∞ (ON CONFLICT DO NOTHING)
        conn.rollback()
        return False
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –º–æ–Ω–µ—Ç: {e}")
        conn.rollback()
        return False
    finally:
        conn.close()


def update_user_title(bot, user_id, chat_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∏—Ç—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    conn, cursor = database.postgres_init()
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute(
            'SELECT opened_cases, title FROM user_data WHERE user_id = %s',
            (user_id,)
        )
        user_data = cursor.fetchone()

        if not user_data:
            logging.error(f"User {user_id} not found in database")
            return

        opened_cases, current_title = user_data

        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∏—Ç—É–ª (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
        new_title = None
        for threshold in sorted(dict_convert.CASE_TITLES.keys(), reverse=True):
            if opened_cases >= threshold:
                if dict_convert.CASE_TITLES[threshold]["title"] != current_title:
                    new_title = dict_convert.CASE_TITLES[threshold]
                break

        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –Ω–æ–≤—ã–π —Ç–∏—Ç—É–ª - –æ–±–Ω–æ–≤–ª—è–µ–º
        if new_title:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏—Ç—É–ª –≤ –ë–î
            cursor.execute(
                'UPDATE user_data SET title = %s WHERE user_id = %s',
                (new_title["title"], user_id)
            )
            conn.commit()

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–∏—Ç—É–ª–∞
            congrat_msg = (
                f"üéâ <b>–ù–æ–≤—ã–π —Ç–∏—Ç—É–ª –ø–æ–ª—É—á–µ–Ω!</b>\n\n"
                f"üèÜ <b>{new_title['title']}</b>\n"
                f"üìú <i>{new_title['description']}</i>\n\n"
                f"üìä –û—Ç–∫—Ä—ã—Ç–æ –∫–µ–π—Å–æ–≤: <code>{opened_cases}</code>\n"
                f"üîÆ –°–ª–µ–¥—É—é—â–∏–π —Ç–∏—Ç—É–ª —á–µ—Ä–µ–∑: <code>{next_threshold(opened_cases)}</code>"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            sent_msg = bot.send_message(
                chat_id,
                congrat_msg,
                parse_mode='HTML'
            )

    except Exception as e:
        logging.error(f"Error updating user title: {e}")
        conn.rollback()
    finally:
        cursor.close()
        conn.close()


def next_threshold(current_count):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–∏—Ç—É–ª–∞"""
    thresholds = sorted(dict_convert.CASE_TITLES.keys())
    for threshold in thresholds:
        if current_count < threshold:
            return threshold - current_count
    return "‚àû (–º–∞–∫—Å–∏–º—É–º)"


def open_buster(bot, message, user_id):
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –±—É—Ä—Å—Ç–µ—Ä —Å –∫—É–ø–æ–Ω–∞–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—É–ø–æ–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –ë–î, —Å–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫—É–ø–æ–Ω–æ–≤,
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∫—É–ø–æ–Ω–∞—Ö –∏ –∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.

    Args:
        bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–≥–æ –±—É—Ä—Å—Ç–µ—Ä

    Returns:
        None
    """
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—É–ø–æ–Ω—ã
    coupons = generators.generate_coupons(qty_coupons=5)
    logger.debug(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫—É–ø–æ–Ω—ã: {coupons}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    conn, cursor = database.postgres_init()
    coupons_list = []  # –ü—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –∫—É–ø–æ–Ω–æ–≤
    coupon_details = []  # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É–ø–æ–Ω–∞—Ö –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è

    try:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–µ–π—Å–æ–≤
        logger.debug(f"–û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–µ–π—Å–æ–≤ –¥–ª—è user_id={user_id}")
        cursor.execute(
            'UPDATE user_data SET opened_cases = opened_cases + 1 WHERE user_id = %s RETURNING opened_cases',
            (user_id,)
        )
        new_case_count = cursor.fetchone()[0]
        conn.commit()
        logger.debug(f"–ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–µ–π—Å–æ–≤: {new_case_count}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∏—Ç—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.debug("–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏—Ç—É–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        update_user_title(bot, user_id, message.chat.id)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É–ø–æ–Ω
        for coupon in coupons:
            color = dict_convert.color_convert[coupon['rarity']]
            collection_type = random.choice(configs.collection_type_list)
            id_for_search = f'{collection_type}_{color}_{coupon["number"]}'

            logger.debug(f"–ò—â–µ–º –∫—É–ø–æ–Ω –≤ –ë–î: id={id_for_search}")

            cursor.execute('SELECT * FROM coupons WHERE id=%s', (id_for_search,))
            coupon_data = cursor.fetchone()

            if not coupon_data:
                logging.warning(f"–ö—É–ø–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î: {id_for_search}")
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –∫—É–ø–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω

            id_coupons, number, name, color, effect, description, collection = coupon_data
            coupons_list.append(fr"downloads_coupons\{id_coupons}.png")
            logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω –∫—É–ø–æ–Ω {id_coupons} –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫—É–ø–æ–Ω–µ
            rarity_emoji = dict_convert.smile_convert.get(coupon['rarity'], '‚ùì')
            coupon_details.append(
                f"{rarity_emoji} <b>{name}</b> (‚Ññ{number}, {collection_type})\n"
            )

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∫—É–ø–æ–Ω–∞
            try:
                logger.debug(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫—É–ø–æ–Ω–∞ {id_coupons}")
                images.create_coupon(
                    rarity=coupon['rarity'],
                    title=name,
                    description=description,
                    effect=effect,
                    coupon_number=number,
                    coupon_code=id_coupons,
                    collection_type=collection_type,
                    output_path=fr"downloads_coupons\{id_coupons}.png",
                )
                logger.debug(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—É–ø–æ–Ω–∞ {id_coupons} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ")
            except Exception as e:
                logger.error(f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫—É–ø–æ–Ω–∞ {id_coupons}: {e}')
                logger.debug(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É–ø–æ–Ω –≤ –ë–î –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            try:
                logger.debug(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É–ø–æ–Ω {id_coupons} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                database.save_info_coupon(user_id, id_coupons, name, color)
            except Exception as e:
                logger.error(
                    f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É–ø–æ–Ω–∞ {id_coupons} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫—É–ø–æ–Ω–∞—Ö
        rarity_emojis = " ".join(
            [dict_convert.smile_convert.get(coupon['rarity'], '‚ùì')
             for coupon in coupons]
        )
        logger.debug(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã —ç–º–æ–¥–∑–∏ —Ä–µ–¥–∫–æ—Å—Ç–µ–π: {rarity_emojis}")

        message_text = (
                f"üìä <b>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–∫–∞:</b> {rarity_emojis}\n\n"
                f"<b>–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∫—É–ø–æ–Ω—ã:</b>\n"
                + "\n".join(coupon_details)
        )
        logger.debug(f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message_text}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫—É–ø–æ–Ω–æ–≤
        try:
            logger.debug("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫—É–ø–æ–Ω–æ–≤")
            bot.send_message(
                message.chat.id,
                message_text,
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–æ–π
        if coupons_list:
            media_group = []
            logger.debug(f"–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –∏–∑ {len(coupons_list)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

            for path in coupons_list:
                try:
                    logger.debug(f"–ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {path}")
                    with open(path, 'rb') as photo:
                        photo_data = photo.read()
                    media_group.append(InputMediaPhoto(photo_data))
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ {path}: {e}")
                    logger.debug(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")

            if media_group:
                try:
                    logger.debug("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∫—É–ø–æ–Ω–æ–≤")
                    bot.send_media_group(message.chat.id, media_group)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}")

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ open_buster: {e}")
        logger.debug(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        conn.rollback()
    finally:
        logger.debug("–ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î")
        cursor.close()
        conn.close()


def get_coupon_info(coupon_code, bot, message, user_id):
    conn, cursor = database.postgres_init()
    try:
        cursor.execute('SELECT * FROM coupons WHERE id = %s', (coupon_code,))
        coupon_data = cursor.fetchone()
        coupon_code, number, name, color, effect, description, collection = coupon_data
        smile = dict_convert.color_to_smile_convert[color]

        cursor.execute(
            'SELECT quantity FROM user_coupons WHERE coupon_code = %s AND user_id = %s',
            (coupon_code, user_id)
        )
        quantity = int(cursor.fetchone()[0])

        bot.send_photo(message.chat.id, open(rf'downloads_coupons\{coupon_code}.png', 'rb'))
        bot.send_message(
            message.chat.id,
            f'{smile} –ö—É–ø–æ–Ω ‚Ññ {number}\n'
            f'–ö–æ–ª–ª–µ–∫—Ü–∏—è: {collection}\n'
            f'\n'
            f'{name}\n'
            f'\n'
            f'{effect}\n'
            f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç.',
            reply_markup=keyboards.my_coupons_data_keyboards(coupon_code)
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É–ø–æ–Ω–µ: {e}")
        conn.rollback()
    finally:
        cursor.close()
        conn.close()


def activate_coupon(coupon_code, bot, message, user_id, user_data):
    conn, cursor = database.postgres_init()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫—É–ø–æ–Ω–µ
        cursor.execute(
            'SELECT quantity, name, color FROM user_coupons '
            'WHERE coupon_code = %s AND user_id = %s',
            (coupon_code, user_id)
        )
        result = cursor.fetchone()

        if not result:
            bot.send_message(message.chat.id, "‚ùå –ö—É–ø–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω")
            return

        quantity, name, color = result
        quantity = int(quantity)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø–æ–Ω–æ–≤ –∏–ª–∏ —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
        if quantity > 1:
            cursor.execute(
                'UPDATE user_coupons SET quantity = quantity - 1 WHERE coupon_code = %s AND user_id = %s',
                (coupon_code, user_id)
            )
        else:
            cursor.execute(
                'DELETE FROM user_coupons WHERE coupon_code = %s AND user_id = %s',
                (coupon_code, user_id)
            )

        # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
        conn.commit()

        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(
            message.chat.id,
            f"‚úÖ –ö—É–ø–æ–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ú–∞—Å—Ç–µ—Ä –∏–≥—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å"
        )
        smile = dict_convert.color_to_smile_convert[color]

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞
        bot.send_message(
            configs.master_id,
            f"üé´ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∫—É–ø–æ–Ω:\n"
            f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {smile} {name}\n"
            f"‚Ä¢ –ö–æ–¥: {coupon_code}\n"
            f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data.full_name}",
            parse_mode='html'
        )

    except Exception as e:
        conn.rollback()
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫—É–ø–æ–Ω–∞")
        print(f"Error activating coupon: {e}")


def sell_coupon(coupon_code, bot, message, user_id, user_data):
    conn, cursor = database.postgres_init()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫—É–ø–æ–Ω–µ
        cursor.execute(
            'SELECT quantity, name, color FROM user_coupons WHERE coupon_code = %s AND user_id = %s',
            (coupon_code, user_id)
        )
        result = cursor.fetchone()

        if not result:
            bot.send_message(message.chat.id, "‚ùå –ö—É–ø–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω")
            return

        quantity, name, color = result
        quantity = int(quantity)

        # –ü—Ä–∏–≤–æ–¥–∏–º —Ü–≤–µ—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        color_lower = color.lower()

        if color_lower not in configs.color_prices:
            bot.send_message(message.chat.id, f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ü–≤–µ—Ç –∫—É–ø–æ–Ω–∞: {color}")
            return

        price = configs.color_prices[color_lower]

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø–æ–Ω–æ–≤ –∏–ª–∏ —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
        if quantity > 1:
            cursor.execute(
                'UPDATE user_coupons SET quantity = quantity - 1 WHERE coupon_code = %s AND user_id = %s',
                (coupon_code, user_id)
            )
        else:
            cursor.execute(
                'DELETE FROM user_coupons WHERE coupon_code = %s AND user_id = %s',
                (coupon_code, user_id)
            )

        # –ù–∞—á–∏—Å–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –æ –¥–µ–Ω—å–≥–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute(
            'SELECT qty_coins FROM money WHERE user_id = %s',
            (user_id,)
        )
        money_result = cursor.fetchone()

        if money_result:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            cursor.execute(
                'UPDATE money SET qty_coins = qty_coins + %s WHERE user_id = %s',
                (price, user_id)
            )
            new_balance = money_result[0] + price
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            cursor.execute(
                'INSERT INTO money (user_id, qty_coins) VALUES (%s, %s)',
                (user_id, price)
            )
            new_balance = price

        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(
            message.chat.id,
            f"‚úÖ –ö—É–ø–æ–Ω '{name}' ({color}) –ø—Ä–æ–¥–∞–Ω –∑–∞ {price} –º–æ–Ω–µ—Ç.\n"
            f"üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {new_balance} –º–æ–Ω–µ—Ç"
        )

        # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
        conn.commit()

    except Exception as e:
        conn.rollback()
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –∫—É–ø–æ–Ω–∞")
        print(f"Error selling coupon: {e}")
